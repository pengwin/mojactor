//! Virtual actors traits and types

use std::future::Future;

use futures::future;

use super::{ActorContext, ActorName};
use crate::{
    errors::{BoxedActorError, ResponderError},
    message::MessageEnvelope,
};

/// Marker trait for actors
pub trait Actor: Sized {
    /// Type of messages envelope
    ///
    /// Usually it can be enum with all messages which actor can handle. See `MessageEnvelope` trait for details.
    ///
    /// Can be generated by `#[derive(Actor)]` macro
    /// use `#[message(MessageType)]` attribute to add messages to enum
    type MessagesEnvelope: MessageEnvelope<Self>;

    /// Type of actor context
    type ActorContext: ActorContext<Self>;

    /// Name of the actor
    fn name() -> ActorName;

    /// Before message processed
    fn before_message(
        &mut self,
        _envelope: &Self::MessagesEnvelope,
        _ctx: &Self::ActorContext,
    ) -> impl Future<Output = Result<(), BoxedActorError>> {
        future::ready(Ok(()))
    }

    /// After message processed
    fn after_message(
        &mut self,
        _ctx: &Self::ActorContext,
    ) -> impl Future<Output = Result<(), BoxedActorError>> {
        future::ready(Ok(()))
    }

    /// Handles message envelope
    fn handle_envelope(
        &mut self,
        envelope: Self::MessagesEnvelope,
        ctx: &Self::ActorContext,
    ) -> impl Future<Output = Result<(), ResponderError>>;
}
